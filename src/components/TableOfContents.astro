<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const tocWrapper = document.createElement('div');
    tocWrapper.id = 'toc-wrapper';
    tocWrapper.className = 'toc-wrapper';

    const tocHeader = document.createElement('div');
    tocHeader.className = 'toc-header';
    tocWrapper.appendChild(tocHeader);

    const tocButton = document.createElement('button');
    tocButton.className = 'toc-button';
    tocButton.innerHTML = `
      <svg width="22" height="22" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M8 6.00067L21 6.00139M8 12.0007L21 12.0015M8 18.0007L21 18.0015M3.5 6H3.51M3.5 12H3.51M3.5 18H3.51M4 6C4 6.27614 3.77614 6.5 3.5 6.5C3.22386 6.5 3 6.27614 3 6C3 5.72386 3.22386 5.5 3.5 5.5C3.77614 5.5 4 5.72386 4 6ZM4 12C4 12.2761 3.77614 12.5 3.5 12.5C3.22386 12.5 3 12.2761 3 12C3 11.7239 3.22386 11.5 3.5 11.5C3.77614 11.5 4 11.7239 4 12ZM4 18C4 18.2761 3.77614 18.5 3.5 18.5C3.22386 18.5 3 18.2761 3 18C3 17.7239 3.22386 17.5 3.5 17.5C3.77614 17.5 4 17.7239 4 18Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
      </svg>
    `;
    tocButton.setAttribute('aria-label', 'Toggle Table of Contents');
    tocHeader.appendChild(tocButton);

    const tocList = document.createElement('ul');
    tocList.className = 'toc-list toc-hidden';
    tocWrapper.appendChild(tocList);

    const headers = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
    let topLevel = 6;

    headers.forEach((header) => {
      const level = parseInt(header.tagName.charAt(1));
      topLevel = Math.min(topLevel, level);
    });

    headers.forEach((header) => {
      // Skip H1 headers
      if (header.tagName === 'H1') return;

      const listItem = document.createElement('li');
      const link = document.createElement('a');
      link.textContent = header.textContent;

      // Encode the header text directly, replacing spaces and special chars
      const urlSafeId = encodeURIComponent(
        header.textContent
          .toLowerCase() // Convert English text to lowercase
          .replace(/\s+/g, '-')
          .replace(/[^\w\u4E00-\u9FFF-]/g, ''),
      );

      link.href = `#${urlSafeId}`;

      const actualLevel = parseInt(header.tagName.charAt(1));
      const adjustedLevel = actualLevel - topLevel + 1;
      listItem.classList.add(`toc-level-${adjustedLevel}`);

      listItem.appendChild(link);
      tocList.appendChild(listItem);

      // Skip adding clip icon for h1 blog titles
      if (header.tagName !== 'H1') {
        header.style.position = 'relative';

        // Wrap header content in a link
        const headerContent = header.innerHTML;
        const headerLink = document.createElement('a');
        headerLink.href = `#${urlSafeId}`;
        headerLink.style.color = 'inherit';
        headerLink.style.textDecoration = 'none';
        header.innerHTML = '';
        headerLink.innerHTML = headerContent;
        header.appendChild(headerLink);

        // Add clip icon
        const clipLink = document.createElement('a');
        clipLink.href = `#${urlSafeId}`;
        clipLink.className = 'header-link';
        clipLink.innerHTML = `
          <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
            <path d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"/>
          </svg>
        `;

        header.appendChild(clipLink);
      }

      header.id = urlSafeId;
    });

    document
      .querySelector('body')
      ?.insertBefore(tocWrapper, document.querySelector('body')?.firstChild);

    const tocWrapperElement = document.getElementById('toc-wrapper');
    if (tocWrapperElement) {
      tocButton.addEventListener('click', (event) => {
        event.stopPropagation();
        tocList.classList.toggle('toc-hidden');
        tocWrapperElement.classList.toggle('expanded');
      });

      // Add click outside listener
      document.addEventListener('click', (event) => {
        const isClickOnHeaderLink = event.target.closest('.toc-list a');
        if (!isClickOnHeaderLink && !tocList.classList.contains('toc-hidden')) {
          tocList.classList.add('toc-hidden');
          tocWrapperElement.classList.remove('expanded');
        }
      });

      const topHeader = document.querySelector('header');
      const firstHeader = document.querySelector('h1, h2, h3, h4, h5, h6');

      function updateTocPosition() {
        const headerRect = topHeader.getBoundingClientRect();
        const topOffset = headerRect.height + 20;
        const rightOffset = window.innerWidth - headerRect.right;

        tocWrapperElement.style.transition = 'all 0.8s ease';
        tocWrapperElement.style.position = 'fixed';
        tocWrapperElement.style.left = 'auto';
        tocWrapperElement.style.top = `${topOffset}px`;
        tocWrapperElement.style.right = `${rightOffset}px`;
      }

      function updateTocVisibility() {
        const firstHeaderRect = firstHeader.getBoundingClientRect();
        const headerHeight = topHeader.getBoundingClientRect().height;

        if (firstHeaderRect.top < headerHeight) {
          tocWrapperElement?.classList.add('visible');
        } else {
          tocWrapperElement?.classList.remove('visible');
        }
      }

      function handleResize() {
        updateTocPosition();
        updateTocVisibility();
      }

      window.addEventListener('scroll', updateTocVisibility);
      window.addEventListener('resize', updateTocPosition);
      window.addEventListener('resize', handleResize);
      updateTocVisibility();
      updateTocPosition();

      document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
        anchor.addEventListener('click', function (e) {
          e.preventDefault();

          const targetId = this.getAttribute('href').substring(1);
          const targetElement = document.getElementById(targetId);

          if (targetElement) {
            const headerRect = topHeader.getBoundingClientRect();
            const yOffset = headerRect.top - 85;
            const y = targetElement.getBoundingClientRect().top + window.scrollY + yOffset;

            // Update URL before scrolling
            history.pushState(null, '', `#${targetId}`);

            window.scrollTo({ top: y, behavior: 'smooth' });

            if (this.closest('.toc-list')) {
              tocList.classList.toggle('toc-hidden');
              tocWrapperElement.classList.toggle('expanded');
            }
          }
        });
      });
    }

    if (window.location.hash) {
      if ('scrollRestoration' in history) {
        history.scrollRestoration = 'manual';
      }

      const handleScroll = () => {
        const targetId = window.location.hash.substring(1);
        const targetElement = document.getElementById(targetId);
        const topHeader = document.querySelector('header');

        if (targetElement && topHeader) {
          requestAnimationFrame(() => {
            const headerRect = topHeader.getBoundingClientRect();
            const yOffset = headerRect.top - 85;
            const y = targetElement.getBoundingClientRect().top + window.scrollY + yOffset;
            window.scrollTo({ top: y, behavior: 'smooth' });
          });
        }
      };

      window.addEventListener('DOMContentLoaded', handleScroll);
      window.addEventListener('load', handleScroll);
    }
  });
</script>

<style is:global>
  .header-link {
    position: absolute;
    left: -26px;
    top: 50%;
    transform: translateY(-50%);
    opacity: 0;
    padding: 2px;
    transition: opacity 0.2s;
    color: inherit;
  }

  h2:hover .header-link,
  h3:hover .header-link,
  h4:hover .header-link,
  h5:hover .header-link,
  h6:hover .header-link {
    opacity: 1;
  }

  .header-link:hover {
    opacity: 0.8;
  }

  h2 a,
  h3 a,
  h4 a,
  h5 a,
  h6 a {
    color: inherit !important;
    text-decoration: none;
  }
</style>
